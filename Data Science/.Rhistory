less <- 0
for(i in 1:10000)
if(var(irisSample) > var(sample(irisSample, 49, replace = TRUE)))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:10000)
if(var(irisSample) > var(sample(irisSample, 49, replace = TRUE)))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m = <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000)
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = TRUE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = FALSE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
m <- mean(irisSample)
greater <- 0
less <- 0
for(i in 1:10000) {
sampVar <- 0
for(i in (sample(irisSample, 40, replace = FALSE)))
sampVar <- sampVar + ((i - m)*(i - m))/40
if(var(irisSample) > sampVar)
less <- less + 1
else
greater <- greater + 1
}
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
> f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:1000000)
if(sd(irisSample) > sqrt(var(sample(irisSample, 40))))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
> f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:1000000)
if(sd(irisSample) > sqrt(var(sample(irisSample, 40))))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:1000000)
if(sd(irisSample) > sqrt(var(sample(irisSample, 40))))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:10000)
if(sd(irisSample) > sqrt(var(sample(irisSample, 30))))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:10000)
if(sd(irisSample) > sqrt(var(sample(irisSample, 30))))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
greater <- 0
less <- 0
for(i in 1:10000)
if(sd(irisSample) > sqrt(var(sample(irisSample, 30))))
less <- less + 1
else
greater <- greater + 1
print(less)
print(greater)
}
f(iris$Sepal.Width[c(1:50)])
f(iris$Sepal.Length[c(1:50)])
rexp(50)
samples <- replicate(1000, rexp(50))
smeans <- apply(samples,2,mean)
svars <- apply(samples,2,var)
cor(smeans,svars)
plot(smeans,svars)
f <- function(irisSample) {
sigma <- sd(irisSample)
sampMean <- mean(irisSample)
n <- length(irisSample)
t <- qt(0.025, n-1, lower.tail = FALSE)
standErr <- sigma/sqrt(n)
c((sampMean -t * standErr), (sampMean + t * standErr))
}
f(iris$Sepal.Length[c(1:50)])
f(iris$Sepal.Length[c(51:100)])
f(iris$Sepal.Length[c(101:150)])
t.test(iris$Sepal.Length[c(1:50)])
f <- function(irisSample) {
sigma <- sd(irisSample)
sampMean <- mean(irisSample)
n <- length(irisSample)
t <- qt(0.025, n-1, lower.tail = FALSE)
standErr <- sigma/sqrt(n)
c((sampMean -t * standErr), (sampMean + t * standErr))
}
f(iris$Sepal.Length[c(1:50)])
f(iris$Sepal.Length[c(51:100)])
f(iris$Sepal.Length[c(101:150)])
t.test(iris$Sepal.Length[c(1:50)])
t.test(iris$Sepal.Length[c(51:100)])
t.test(iris$Sepal.Length[c(101:150)])
install.packages("ISLR")
require("ISLR")
show("ISLR")
show(ISLR)
library(ISLR)
View(Wage)
library("ISLR", lib.loc="~/R/win-library/3.4")
view(College)
view(college)
summary(college)
summary(College)
plot(College$Accept/College$Apps, College$F.Undergrad)
1+1
c(c(1:10))
c(c(1:10))
c(c(1:10),c(1:10),c(1:10),c(1:10),c(1:10),c(1:10),c(1:10),c(1:10),c(1:10),c(1:10),c(1:10))
1+
1
?rnorm
rnorm(100)
mean(rnorm(100))
plot(rnorm(100))
plot(rnorm(100))
normTest = rnorm(100)
within1 = normTest[normTest >= -1 && normTest <= 1]
plot(normTest)
plot(within1)
within1 = normTest[normTest >= -1]
plot(within1)
within1 = within1[within1 <= 1]
plot(within1)
length(normTest)
length(within1)/length(normTest)
normTest = rnorm(1000 sd="1")
normTest = rnorm(1000 sd=1)
?rnorm
normTest = rnorm(1000 sd = "1")
normTest = rnorm(1000, mean = 0, sd = 0)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
print(c(length(within1)/length(normTest), length(within2)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
print(c(length(within1)/length(normTest), length(within2)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest), length(within2)/length(normTest), length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest),
length(within2)/length(normTest),
length(within3)/length(normTest)))
?rnorm
getwd()
setwd("C:/Users/Ben/Desktop/School FIles/ClassWork/Data Science")
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest),
length(within2)/length(normTest),
length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest),
length(within2)/length(normTest),
length(within3)/length(normTest)))
normTest = rnorm(1000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest),
length(within2)/length(normTest),
length(within3)/length(normTest)))
normTest = rnorm(100000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest),
length(within2)/length(normTest),
length(within3)/length(normTest)))
normTest = rnorm(1000000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
print(100 * c(length(within1)/length(normTest),
length(within2)/length(normTest),
length(within3)/length(normTest)))
normTest = rnorm(1000000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
sprintf("%d percent of the distro is within 1",
100 * length(within1)/length(normTest))
normTest = rnorm(1000000, mean = 0, sd = 1)
within1 = normTest[normTest >= -1]
within1 = within1[within1 <= 1]
within2 = normTest[normTest >= -2]
within2 = within2[within2 <= 2]
within3 = normTest[normTest >= -3]
within3 = within3[within3 <= 3]
sprintf("%f percent of the distro is within 1",
100 * length(within1)/length(normTest))
1:10
1 + 1:10
summary(1:10)
sort(1:10)
sort(1:10, decreasing = T)
name = "alyssa"
cat("Hello, ", name, " How are you?")
