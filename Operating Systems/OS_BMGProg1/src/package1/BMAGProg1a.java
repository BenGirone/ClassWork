//Ben Girone	CSC 403		10/23/17
//This program is stupid. It obviously does not work. I am ashamed to put my name on it.
//If you'd like a better description, look at the version b of this project. It works.

package package1;

//Producer class will execute within its own thread to generate the numbers
class ProducerA extends Thread
{
	//begin thread execution
	public void run()
	{
		for (int i = 1; i <= 10; i++)
		{
			//sleep for 2 millisecond
			try
			{
				Thread.sleep(2);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}

			//increment the common integer
			BMAGProg1a.commonInt++;
		}
	} //end thread execution
}

//Consumer class will execute within its own thread to sum the numbers
//generated by the producer
class ConsumerA extends Thread
{
	//declare a variable to hold the sum
	private int x = 0;
	
	//begin thread execution
	public void run()
	{	
		for (int i = 1; i <= 10; i++)
		{
			//sleep for a millisecond
			try
			{
				Thread.sleep(1);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}

			//sum the number most recently produced by the Producer class
			x += BMAGProg1a.commonInt;
		}

		//output the sum
		System.out.println(x);
	} //end thread execution
}

//Test class
public class BMAGProg1a
{
	//the common integer
	//the Producer class will modify the value of this variable
	//the Consumer class will sum the value of this variable
	public static int commonInt = 0;

	//begin main function
	public static void main(String[] args)
	{
		//declare Producer and Consumer objects
		ProducerA producer = new ProducerA();
		ConsumerA consumer = new ConsumerA();

		//start the producer and consumer threads
		producer.start();
		consumer.start();

	} //end main function

}

/* PseudoCode

BMAGProg1a 
Set commonInt to 0;
(main)
	Create a ProducerA object (producer).
	Create a ConsumerA object (consumer).
	Start the objects (producer, consumer) in their own threads. (Call the start method for both objects)

ProducerA 
(run)
	For i along the interval [1,10] in steps of 1.
		Sleep for 2 milliseconds.
		Increment BMAGProg1a.commonInt
		
ConsumerA 
Set x to 0.
(run)
	For i along the interval [1,10] in steps of 1.
		Sleep for 1 milliseconds.
		x = x + BMAGProg1a.commonInt
	Print x.
*/
