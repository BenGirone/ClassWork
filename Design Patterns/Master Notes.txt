//---------9/4/17---------//

Java vs C:
    -int values cannot function as booleans.
    -"package" access modifier is similar to "internal" access modifier in C#.
    -Use "extends" for class inheritance. Use "implements" for interface inheritance.
    -Make sure to research printf.
    -Declare vars the first place they are used (Convention).
    
//----------9/6/17----------//

//----------9/18/17---------//
Composite pattern page 163
Strategy pattern page 315
abstract factory pattern page 87

//----------9/25/17----------//

//----------9/29/17----------//
-test topics
    -Java review
    -Chapter 1,2
    -Adapter
    -Bridge
    -Facade
    -Possibly deorator
    
    -knoow the purpose, motivation and consequences of each pattern
        -use cases too
        
    -cheat sheet allowed
    
//---------10/2/17----------//

-Decorator(wrapper)
    -Intent
        -Attach additional responsibilities to an object dynamically. Decorators provide
        a flexible alternative to subclassing for extending functionality.
    
    -Motivation
        -Sometimes we want to add responsibilities to individual objects, not to an entire class.
        
    -Applicability
        -to add responsibilities to individual objects dynamically and
        transparently, that is, without affecting other objects.
        -for responsibilities that can be withdrawn.
        -when extension by subclassing is impractical.
     
    -Participants
        -Component (VisualComponent)
            -defines the interface for objects that can have responsibilities
            added to them dynamically.
        -ConcreteComponent (TextView)
            -defines an object to which additional responsibilities can be
            attached.
        -Decorator
            -maintains a reference to a Component object and defines an interface
            that conforms to Component's interface.
        -ConcreteDecorator (BorderDecorator, ScrollDecorator)
            -adds responsibilities to the component.
            
    -Collaborations
        -Decorator forwards requests to its Component object. It may optionally
        perform additional operations before and after forwarding the request.
        
    -Consequences
        -More flexibility than static inheritance.
        -Avoids feature-laden classes high up in the hierarchy.
        -A decorator and its component aren't identical.
        -Lots of little objects.
        
    -Implementation
        -Interface conformance. A decorator object's interface must conform to the
        interface of the component it decorates.
        -Omitting the abstract Decorator class. There's no need to define an abstract
        Decorator class when you only need to add one responsibility.
        -Keeping Component classes lightweight.
        -Changing the skin of an object versus changing its guts.
        
    -Related Patterns
        -Adapter
        -Composite
        -Strategy
        
-Flyweight
    -Intent
        -Use sharing to support large numbers of fine-grained objects efficiently
        -Kinda like a static memeber or class shared by a bunch of objects
    -Motivation
    
    -Applicability

